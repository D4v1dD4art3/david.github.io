{"version":3,"file":"src_app_modules_auth_auth_module_ts.js","mappings":"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","sources":["./src/app/core/guards/redirect-to.guard.ts","./src/app/modules/auth/auth-routing.module.ts","./src/app/modules/auth/auth.module.ts","./src/app/modules/auth/components/forgot-password/forgot-password.component.ts","./src/app/modules/auth/components/forgot-password/forgot-password.component.html","./src/app/modules/auth/components/layout/layout.component.ts","./src/app/modules/auth/components/layout/layout.component.html","./src/app/modules/auth/components/login/login.component.ts","./src/app/modules/auth/components/login/login.component.html","./src/app/modules/auth/components/recovery-password/recovery-password.component.ts","./src/app/modules/auth/components/recovery-password/recovery-password.component.html","./src/app/modules/auth/components/register/register.component.ts","./src/app/modules/auth/components/register/register.component.html","./src/app/validators/index.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { map, take } from 'rxjs/operators';\nimport { AppState } from '@core/models/appState';\n@Injectable({\n  providedIn: 'root',\n})\nexport class RedirectToGuard {\n  constructor(\n    private router: Router,\n    private store: Store<AppState>\n  ) { }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): any {\n    return this.store.select('auth')\n      .pipe(\n        take(1),\n        map((authState) => authState.user),\n        map((user) => {\n          if (!user) {\n            return true;\n          }\n          return this.router.createUrlTree(['/', 'dashboard']);\n        })\n      )\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RedirectToGuard } from '@core/guards/redirect-to.guard';\nimport { LayoutComponent } from './components/layout/layout.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';\nimport { RecoveryPasswordComponent } from './components/recovery-password/recovery-password.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LayoutComponent,\n    canActivate: [RedirectToGuard],\n    children: [\n      {\n        path: '',\n        redirectTo: '/auth',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        component: LoginComponent,\n      },\n      {\n        path: 'register',\n        component: RegisterComponent,\n      },\n      {\n        path: 'recovery',\n        component: RecoveryPasswordComponent,\n      },\n      {\n        path: 'forgot-password',\n        component: ForgotPasswordComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LayoutComponent } from './components/layout/layout.component';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { SharedModule } from '../../shared/shared.module';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';\nimport { RecoveryPasswordComponent } from './components/recovery-password/recovery-password.component';\n\n@NgModule({\n  declarations: [LayoutComponent, LoginComponent, RegisterComponent, ForgotPasswordComponent, RecoveryPasswordComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    SharedModule,\n  ],\n})\nexport class AuthModule { }\n","import { Component, OnInit, inject } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DialogType } from '@core/models/dialog.enum';\nimport { AuthService } from '@core/services/auth/auth.service';\nimport { DialogService } from '@core/services/dialog.service';\nimport { CustomValidators } from 'src/app/validators';\n\n@Component({\n  selector: 'portfolio-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent implements OnInit {\n  isLoading = false;\n  private fb = inject(FormBuilder)\n  private router = inject(Router)\n  private route = inject(ActivatedRoute)\n  private auth = inject(AuthService)\n  private dialogService = inject(DialogService)\n  private dialogEnumType = DialogType;\n\n  token: string;\n  pageForm = this.fb.group({\n    password: new FormControl('', [Validators.required]),\n    confirmPassword: new FormControl('')\n  }, {\n    validators: [CustomValidators.matchPasswords]\n  })\n  get password() {\n    return this.pageForm.get('password');\n  }\n  get confirmPassword() {\n    return this.pageForm.get('confirmPassword');\n  }\n\n  ngOnInit(): void {\n    this.route.queryParamMap.subscribe((params) => {\n      const token = params.get('token')\n      if (!token) {\n        this.router.navigate(['auth'])\n        return;\n      }\n      this.token = token;\n    })\n  }\n\n  onSubmit() {\n    if (this.pageForm.invalid) {\n      this.pageForm.markAllAsTouched();\n      return;\n    }\n    this.isLoading = true;\n    this.auth.changePassword(this.token, this.pageForm.get('password').value)\n      .subscribe(() => {\n        this.isLoading = false;\n        this.dialogService.openDialog(this.dialogEnumType.Success, {\n          message: 'Password changed successfully',\n        })\n        this.router.navigate(['/', 'auth'])\n      },\n        () => {\n          this.isLoading = false;\n          this.router.navigate(['/', 'auth'])\n        })\n  }\n}\n","<form\n  class=\"form flex flex-col space-y-5 md:w-[500px] mx-auto md:px-0 px-5\"\n  [formGroup]=\"pageForm\"\n  (ngSubmit)=\"onSubmit()\"\n>\n  <div>\n    <input\n      formControlName=\"password\"\n      type=\"password\"\n      placeholder=\"Password\"\n      name=\"password\"\n      class=\"mb-2\"\n    />\n    <portfolio-error-validation-mesasage\n      [control]=\"password\"\n      name=\"Password\"\n    ></portfolio-error-validation-mesasage>\n  </div>\n\n  <div>\n    <input\n      formControlName=\"confirmPassword\"\n      type=\"password\"\n      placeholder=\"Confirme Password\"\n      name=\"confirmedPassword\"\n      class=\"mb-2\"\n    />\n    <portfolio-error-validation-mesasage\n      *ngIf=\"confirmPassword?.touched && pageForm?.hasError('match_password')\"\n      [control]=\"pageForm\"\n    ></portfolio-error-validation-mesasage>\n  </div>\n\n  <portfolio-button type=\"submit\" color=\"warn\" class=\"self-center w-[250px]\"\n    >Change Password</portfolio-button\n  >\n</form>\n\n<portfolio-loader *ngIf=\"isLoading\"></portfolio-loader>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'portfolio-layout',\n  templateUrl: './layout.component.html',\n  styleUrls: ['./layout.component.scss']\n})\nexport class LayoutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<portfolio-navbar></portfolio-navbar>\n<portfolio-wrapper-container>\n  <div class=\"main-container\">\n    <div class=\"top\"></div>\n    <div class=\"bottom\"></div>\n    <div class=\"main-container__forms\">\n      <div class=\"wrapper\">\n        <div class=\"container\">\n          <h1 class=\"text-white\">Welcome to</h1>\n          <h1 class=\"text-white\">the Admin Module</h1>\n          <router-outlet></router-outlet>\n        </div>\n        <ul class=\"bg-bubbles\">\n          <li></li>\n          <li></li>\n          <li></li>\n          <li></li>\n          <li></li>\n          <li></li>\n          <li></li>\n          <li></li>\n          <li></li>\n          <li></li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</portfolio-wrapper-container>\n","import { Component, OnDestroy, OnInit, inject } from '@angular/core';\nimport {\n  AbstractControl,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport * as AuthActions from '../../../../store/operations/auth/auth.actions';\nimport { Store } from '@ngrx/store';\nimport { Router } from '@angular/router';\nimport { DialogType } from '@core/models/dialog.enum';\nimport { AppState } from '@core/models/appState';\n@Component({\n  selector: 'portfolio-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  private router = inject(Router);\n  dialogTypeEnum = DialogType;\n  signInForm!: FormGroup;\n  signInSub!: Subscription;\n  isLoading = false;\n  constructor(private store: Store<AppState>) {\n    this.buildForm();\n  }\n  ngOnInit(): void {\n    this.signInSub = this.store.select('auth').subscribe((authResp) => {\n      this.isLoading = authResp.loading;\n    });\n  }\n  onSubmit(): void {\n    if (this.signInForm.invalid) {\n      this.signInForm.markAllAsTouched();\n      return;\n    }\n    const email = this.signInForm.value.email;\n    const password = this.signInForm.value.password;\n    this.store.dispatch(AuthActions.loginStart({ email, password }));\n  }\n\n  signUp() {\n    this.router.navigate(['/', 'auth', 'register'])\n  }\n\n  get email(): AbstractControl {\n    return this.signInForm.get('email');\n  }\n  get password(): AbstractControl {\n    return this.signInForm.get('password');\n  }\n  private buildForm(): void {\n    this.signInForm = new FormGroup({\n      email: new FormControl('', [\n        Validators.required,\n        Validators.email,\n      ]),\n      password: new FormControl('', [Validators.required]),\n    });\n  }\n  ngOnDestroy(): void {\n    if (this.signInSub) {\n      this.signInSub.unsubscribe();\n    }\n  }\n}\n","<form class=\"form\" (ngSubmit)=\"onSubmit()\" [formGroup]=\"signInForm\">\n  <div class=\"mb-4\">\n    <input formControlName=\"email\" type=\"email\" placeholder=\"Email\" />\n\n    <portfolio-error-validation-mesasage\n      [control]=\"signInForm.get('email')\"\n      name=\"Email\"\n    >\n    </portfolio-error-validation-mesasage>\n  </div>\n\n  <div class=\"mb-4\">\n    <input formControlName=\"password\" type=\"password\" placeholder=\"Password\" />\n\n    <portfolio-error-validation-mesasage\n      [control]=\"signInForm.get('password')\"\n      name=\"Password\"\n    >\n    </portfolio-error-validation-mesasage>\n  </div>\n\n  <br />\n  <div class=\"flex flex-col items-center space-y-2\">\n    <portfolio-button type=\"submit\" color=\"warn\" class=\"w-[250px]\">\n      Sign In\n    </portfolio-button>\n    <a class=\"text-lg\" routerLink=\"/auth/recovery\">Forgot password?</a>\n  </div>\n</form>\n<span class=\"text-gray-200 mr-2\">Do have an account?</span>\n<portfolio-button (clickEvent)=\"signUp()\" color=\"primary\">\n  Sign up\n</portfolio-button>\n\n<portfolio-loader *ngIf=\"isLoading\"></portfolio-loader>\n","import { Component, inject } from '@angular/core';\nimport { FormControl, Validators } from \"@angular/forms\";\nimport { AuthService } from '@core/services/auth/auth.service';\n\n\n@Component({\n  selector: 'portfolio-recovery-password',\n  templateUrl: './recovery-password.component.html',\n  styleUrls: ['./recovery-password.component.scss']\n})\nexport class RecoveryPasswordComponent {\n  private auth = inject(AuthService);\n  input = new FormControl('', [Validators.required, Validators.email])\n  isEmailSent = false;\n  isLoading = false;\n\n  submit() {\n    if (this.input.invalid) {\n      this.input.markAsTouched();\n      return;\n    }\n    this.isLoading = true;\n    this.auth.recoveryPassword(this.input.value).subscribe(() => {\n      this.isEmailSent = true;\n      this.isLoading = false;\n    },\n      () => {\n        this.isLoading = false;\n      })\n  }\n\n}\n","<ng-container *ngIf=\"!isEmailSent; else emailSent\">\n  <div class=\"flex flex-col space-y-4 md:w-[500px] mx-auto md:px-0 px-5\">\n    <input [formControl]=\"input\" type=\"text\" placeholder=\"Email\" />\n\n    <portfolio-error-validation-mesasage [control]=\"input\" name=\"Email\">\n    </portfolio-error-validation-mesasage>\n  </div>\n\n  <br />\n  <portfolio-button\n    (clickEvent)=\"submit()\"\n    type=\"button\"\n    color=\"warn\"\n    class=\"w-[250px]\"\n  >\n    Send Email\n  </portfolio-button>\n</ng-container>\n\n<ng-template #emailSent>\n  <h1>Email was sent with a change password link please check your inbox.</h1>\n  <h2>You can close this tab</h2>\n</ng-template>\n\n<portfolio-loader *ngIf=\"isLoading\"></portfolio-loader>\n","import { Component, OnDestroy, OnInit, inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs';\nimport * as AuthActions from '../../../../store/operations/auth/auth.actions';\nimport { Router } from '@angular/router';\nimport { AppState } from '@core/models/appState';\nimport { CustomValidators } from \"../../../../validators\";\nimport { CreateUserDto } from '@core/models/user';\nimport { AuthService } from '@core/services/auth/auth.service';\n@Component({\n  selector: 'portfolio-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  private router = inject(Router);\n  private authService = inject(AuthService);\n  constructor(private store: Store<AppState>) { }\n\n  signUpForm = new FormGroup({\n    firstname: new FormControl('', [Validators.required]),\n    lastname: new FormControl('', [Validators.required]),\n    email: new FormControl('', [Validators.required, Validators.email], [CustomValidators.isEmailAvailable(this.authService)]),\n    password: new FormControl('', [Validators.required]),\n    confirmPassword: new FormControl('', [Validators.required]),\n  }, {\n    validators: CustomValidators.matchPasswords\n  });\n  signUpSub!: Subscription;\n  isLoading = false;\n  error!: string;\n  ngOnInit(): void {\n    this.signUpSub = this.store.select('auth').subscribe((authResp) => {\n      this.isLoading = authResp.loading;\n      this.error = authResp.error;\n    });\n  }\n  onSubmit(): void {\n    if (this.signUpForm.invalid) {\n      this.signUpForm.markAllAsTouched();\n      return;\n    }\n    const newUser: CreateUserDto = {\n      email: this.signUpForm.value.email,\n      firstname: this.signUpForm.value.firstname,\n      lastname: this.signUpForm.value.lastname,\n      password: this.signUpForm.value.password,\n    }\n    this.store.dispatch(AuthActions.signUpStart(newUser));\n  }\n  onClearError(): void {\n    this.store.dispatch(AuthActions.clearError());\n  }\n\n  signIn() {\n    this.router.navigate(['/', 'auth'])\n  }\n  get firstname() {\n    return this.signUpForm.get('firstname');\n  }\n  get lastname() {\n    return this.signUpForm.get('lastname');\n  }\n  get email() {\n    return this.signUpForm.get('email');\n  }\n  get password() {\n    return this.signUpForm.get('password');\n  }\n  get confirmPassword() {\n    return this.signUpForm.get('confirmPassword');\n  }\n\n  ngOnDestroy(): void {\n    if (this.signUpSub) {\n      this.signUpSub.unsubscribe();\n    }\n  }\n}\n","<form class=\"form\" [formGroup]=\"signUpForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"mb-4\">\n    <input\n      placeholder=\"First Name\"\n      type=\"text\"\n      formControlName=\"firstname\"\n      name=\"firstname\"\n    />\n    <portfolio-error-validation-mesasage\n      [control]=\"firstname\"\n      name=\"Firstname\"\n    ></portfolio-error-validation-mesasage>\n  </div>\n\n  <div class=\"mb-4\">\n    <input\n      type=\"text\"\n      placeholder=\"Last Name\"\n      formControlName=\"lastname\"\n      name=\"lastname\"\n    />\n    <portfolio-error-validation-mesasage\n      [control]=\"lastname\"\n      name=\"lastname\"\n    ></portfolio-error-validation-mesasage>\n  </div>\n\n  <div class=\"mb-4\">\n    <input\n      type=\"email\"\n      placeholder=\"Email\"\n      formControlName=\"email\"\n      name=\"email\"\n    />\n    <portfolio-error-validation-mesasage\n      [control]=\"email\"\n      name=\"Email\"\n    ></portfolio-error-validation-mesasage>\n  </div>\n\n  <div class=\"mb-4\">\n    <input\n      formControlName=\"password\"\n      type=\"password\"\n      placeholder=\"Password\"\n      name=\"password\"\n    />\n    <portfolio-error-validation-mesasage\n      [control]=\"password\"\n      name=\"Password\"\n    ></portfolio-error-validation-mesasage>\n  </div>\n\n  <div class=\"mb-4\">\n    <input\n      formControlName=\"confirmPassword\"\n      type=\"password\"\n      placeholder=\"Confirme Password\"\n      name=\"confirmPassword\"\n    />\n    <div class=\"flex flex-col\">\n      <portfolio-error-validation-mesasage\n        [control]=\"confirmPassword\"\n        name=\"Confirme Password\"\n      ></portfolio-error-validation-mesasage>\n\n      <portfolio-error-validation-mesasage\n        *ngIf=\"\n          confirmPassword?.touched && signUpForm?.hasError('match_password')\n        \"\n        [control]=\"signUpForm\"\n      ></portfolio-error-validation-mesasage>\n    </div>\n  </div>\n\n  <br />\n  <portfolio-button type=\"submit\" color=\"warn\" class=\"w-[250px]\"\n    >Sign up</portfolio-button\n  >\n</form>\n<span class=\"text-gray-200 mr-2\">Do not have an account yet?</span>\n<portfolio-button color=\"primary\" (clickEvent)=\"signIn()\"\n  >Sign In\n</portfolio-button>\n\n<portfolio-loader *ngIf=\"isLoading\"></portfolio-loader>\n","import { AbstractControl, AsyncValidatorFn, ValidationErrors } from '@angular/forms';\nimport { AuthService } from '@core/services/auth/auth.service';\nimport { Observable } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, first, map, switchMap } from 'rxjs/operators';\n\nexport class CustomValidators {\n\n  static matchPasswords(control: AbstractControl) {\n    const password = control?.get('password')?.value;\n    const confirmPassword = control?.get('confirmPassword')?.value;\n    if (password.length > 0 && password !== confirmPassword) {\n      return { match_password: true };\n    }\n    return null;\n  }\n\n  static isEmailAvailable(authService: AuthService): AsyncValidatorFn {\n    return (control: AbstractControl): Observable<ValidationErrors> => control.valueChanges.pipe(\n      debounceTime(500),\n      distinctUntilChanged(),\n      first(),\n      switchMap((value: string) => authService.isEmailAvailable(value)\n        .pipe(\n          map((rta: { isAvailable: boolean }) => rta.isAvailable ? null : { 'emailNotAvailable': true })\n        ),\n      )\n    )\n  }\n}\n"],"names":["map","take","RedirectToGuard","constructor","router","store","canActivate","route","state","select","pipe","authState","user","createUrlTree","i0","ɵɵinject","i1","Router","i2","Store","factory","ɵfac","providedIn","RouterModule","LayoutComponent","LoginComponent","RegisterComponent","ForgotPasswordComponent","RecoveryPasswordComponent","routes","path","component","children","redirectTo","pathMatch","AuthRoutingModule","forChild","imports","exports","CommonModule","ReactiveFormsModule","FormsModule","SharedModule","AuthModule","declarations","inject","FormBuilder","FormControl","Validators","ActivatedRoute","DialogType","AuthService","DialogService","CustomValidators","ɵɵelement","ɵɵproperty","ctx_r0","pageForm","isLoading","fb","auth","dialogService","dialogEnumType","group","password","required","confirmPassword","validators","matchPasswords","get","ngOnInit","queryParamMap","subscribe","params","token","navigate","onSubmit","invalid","markAllAsTouched","changePassword","value","openDialog","Success","message","selectors","decls","vars","consts","template","ForgotPasswordComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","ForgotPasswordComponent_Template_form_ngSubmit_0_listener","ɵɵelementEnd","ɵɵtemplate","ForgotPasswordComponent_portfolio_error_validation_mesasage_6_Template","ɵɵtext","ForgotPasswordComponent_portfolio_loader_9_Template","ɵɵadvance","touched","hasError","LayoutComponent_Template","FormGroup","AuthActions","dialogTypeEnum","buildForm","signInSub","authResp","loading","signInForm","email","dispatch","loginStart","signUp","ngOnDestroy","unsubscribe","ɵɵdirectiveInject","LoginComponent_Template","LoginComponent_Template_form_ngSubmit_0_listener","LoginComponent_Template_portfolio_button_clickEvent_15_listener","LoginComponent_portfolio_loader_17_Template","ɵɵelementContainerStart","RecoveryPasswordComponent_ng_container_0_Template_portfolio_button_clickEvent_5_listener","ɵɵrestoreView","_r5","ctx_r4","ɵɵnextContext","ɵɵresetView","submit","ɵɵelementContainerEnd","input","isEmailSent","markAsTouched","recoveryPassword","RecoveryPasswordComponent_Template","RecoveryPasswordComponent_ng_container_0_Template","RecoveryPasswordComponent_ng_template_1_Template","ɵɵtemplateRefExtractor","RecoveryPasswordComponent_portfolio_loader_3_Template","_r1","signUpForm","authService","firstname","lastname","isEmailAvailable","signUpSub","error","newUser","signUpStart","onClearError","clearError","signIn","RegisterComponent_Template","RegisterComponent_Template_form_ngSubmit_0_listener","RegisterComponent_portfolio_error_validation_mesasage_17_Template","RegisterComponent_Template_portfolio_button_clickEvent_23_listener","RegisterComponent_portfolio_loader_25_Template","debounceTime","distinctUntilChanged","first","switchMap","control","length","match_password","valueChanges","rta","isAvailable"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}